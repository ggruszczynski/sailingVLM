from __future__ import print_function, division, absolute_import

import math
import threading
from timeit import repeat

import numpy as np
from numba import jit

from numpy.linalg import norm

from numba.typed import List


# collocation points
collocation_points = np.array([[  0.1497944302, -90.          ,  -0.0078503934],
       [  0.1497944302, -70.          ,  -0.0078503934],
       [  0.1497944302, -50.          ,  -0.0078503934],
       [  0.1497944302, -30.          ,  -0.0078503934],
       [  0.1497944302, -10.          ,  -0.0078503934],
       [  0.1497944302,  10.          ,  -0.0078503934],
       [  0.1497944302,  30.          ,  -0.0078503934],
       [  0.1497944302,  50.          ,  -0.0078503934],
       [  0.1497944302,  70.          ,  -0.0078503934],
       [  0.1497944302,  90.          ,  -0.0078503934],
       [  0.3495203372, -90.          ,  -0.0183175847],
       [  0.3495203372, -70.          ,  -0.0183175847],
       [  0.3495203372, -50.          ,  -0.0183175847],
       [  0.3495203372, -30.          ,  -0.0183175847],
       [  0.3495203372, -10.          ,  -0.0183175847],
       [  0.3495203372,  10.          ,  -0.0183175847],
       [  0.3495203372,  30.          ,  -0.0183175847],
       [  0.3495203372,  50.          ,  -0.0183175847],
       [  0.3495203372,  70.          ,  -0.0183175847],
       [  0.3495203372,  90.          ,  -0.0183175847],
       [  0.5492462441, -90.          ,  -0.0287847759],
       [  0.5492462441, -70.          ,  -0.0287847759],
       [  0.5492462441, -50.          ,  -0.0287847759],
       [  0.5492462441, -30.          ,  -0.0287847759],
       [  0.5492462441, -10.          ,  -0.0287847759],
       [  0.5492462441,  10.          ,  -0.0287847759],
       [  0.5492462441,  30.          ,  -0.0287847759],
       [  0.5492462441,  50.          ,  -0.0287847759],
       [  0.5492462441,  70.          ,  -0.0287847759],
       [  0.5492462441,  90.          ,  -0.0287847759],
       [  0.7489721511, -90.          ,  -0.0392519672],
       [  0.7489721511, -70.          ,  -0.0392519672],
       [  0.7489721511, -50.          ,  -0.0392519672],
       [  0.7489721511, -30.          ,  -0.0392519672],
       [  0.7489721511, -10.          ,  -0.0392519672],
       [  0.7489721511,  10.          ,  -0.0392519672],
       [  0.7489721511,  30.          ,  -0.0392519672],
       [  0.7489721511,  50.          ,  -0.0392519672],
       [  0.7489721511,  70.          ,  -0.0392519672],
       [  0.7489721511,  90.          ,  -0.0392519672],
       [  0.948698058 , -90.          ,  -0.0497191584],
       [  0.948698058 , -70.          ,  -0.0497191584],
       [  0.948698058 , -50.          ,  -0.0497191584],
       [  0.948698058 , -30.          ,  -0.0497191584],
       [  0.948698058 , -10.          ,  -0.0497191584],
       [  0.948698058 ,  10.          ,  -0.0497191584],
       [  0.948698058 ,  30.          ,  -0.0497191584],
       [  0.948698058 ,  50.          ,  -0.0497191584],
       [  0.948698058 ,  70.          ,  -0.0497191584],
       [  0.948698058 ,  90.          ,  -0.0497191584]])

# rings
rings = np.array([[[   0.2496573837, -100.          ,   -0.0130839891],
        [   0.0499314767, -100.          ,   -0.0026167978],
        [   0.0499314767,  -80.          ,   -0.0026167978],
        [   0.2496573837,  -80.          ,   -0.0130839891]],

       [[   0.2496573837,  -80.          ,   -0.0130839891],
        [   0.0499314767,  -80.          ,   -0.0026167978],
        [   0.0499314767,  -60.          ,   -0.0026167978],
        [   0.2496573837,  -60.          ,   -0.0130839891]],

       [[   0.2496573837,  -60.          ,   -0.0130839891],
        [   0.0499314767,  -60.          ,   -0.0026167978],
        [   0.0499314767,  -40.          ,   -0.0026167978],
        [   0.2496573837,  -40.          ,   -0.0130839891]],

       [[   0.2496573837,  -40.          ,   -0.0130839891],
        [   0.0499314767,  -40.          ,   -0.0026167978],
        [   0.0499314767,  -20.          ,   -0.0026167978],
        [   0.2496573837,  -20.          ,   -0.0130839891]],

       [[   0.2496573837,  -20.          ,   -0.0130839891],
        [   0.0499314767,  -20.          ,   -0.0026167978],
        [   0.0499314767,    0.          ,   -0.0026167978],
        [   0.2496573837,    0.          ,   -0.0130839891]],

       [[   0.2496573837,    0.          ,   -0.0130839891],
        [   0.0499314767,    0.          ,   -0.0026167978],
        [   0.0499314767,   20.          ,   -0.0026167978],
        [   0.2496573837,   20.          ,   -0.0130839891]],

       [[   0.2496573837,   20.          ,   -0.0130839891],
        [   0.0499314767,   20.          ,   -0.0026167978],
        [   0.0499314767,   40.          ,   -0.0026167978],
        [   0.2496573837,   40.          ,   -0.0130839891]],

       [[   0.2496573837,   40.          ,   -0.0130839891],
        [   0.0499314767,   40.          ,   -0.0026167978],
        [   0.0499314767,   60.          ,   -0.0026167978],
        [   0.2496573837,   60.          ,   -0.0130839891]],

       [[   0.2496573837,   60.          ,   -0.0130839891],
        [   0.0499314767,   60.          ,   -0.0026167978],
        [   0.0499314767,   80.          ,   -0.0026167978],
        [   0.2496573837,   80.          ,   -0.0130839891]],

       [[   0.2496573837,   80.          ,   -0.0130839891],
        [   0.0499314767,   80.          ,   -0.0026167978],
        [   0.0499314767,  100.          ,   -0.0026167978],
        [   0.2496573837,  100.          ,   -0.0130839891]],

       [[   0.4493832906, -100.          ,   -0.0235511803],
        [   0.2496573837, -100.          ,   -0.0130839891],
        [   0.2496573837,  -80.          ,   -0.0130839891],
        [   0.4493832906,  -80.          ,   -0.0235511803]],

       [[   0.4493832906,  -80.          ,   -0.0235511803],
        [   0.2496573837,  -80.          ,   -0.0130839891],
        [   0.2496573837,  -60.          ,   -0.0130839891],
        [   0.4493832906,  -60.          ,   -0.0235511803]],

       [[   0.4493832906,  -60.          ,   -0.0235511803],
        [   0.2496573837,  -60.          ,   -0.0130839891],
        [   0.2496573837,  -40.          ,   -0.0130839891],
        [   0.4493832906,  -40.          ,   -0.0235511803]],

       [[   0.4493832906,  -40.          ,   -0.0235511803],
        [   0.2496573837,  -40.          ,   -0.0130839891],
        [   0.2496573837,  -20.          ,   -0.0130839891],
        [   0.4493832906,  -20.          ,   -0.0235511803]],

       [[   0.4493832906,  -20.          ,   -0.0235511803],
        [   0.2496573837,  -20.          ,   -0.0130839891],
        [   0.2496573837,    0.          ,   -0.0130839891],
        [   0.4493832906,    0.          ,   -0.0235511803]],

       [[   0.4493832906,    0.          ,   -0.0235511803],
        [   0.2496573837,    0.          ,   -0.0130839891],
        [   0.2496573837,   20.          ,   -0.0130839891],
        [   0.4493832906,   20.          ,   -0.0235511803]],

       [[   0.4493832906,   20.          ,   -0.0235511803],
        [   0.2496573837,   20.          ,   -0.0130839891],
        [   0.2496573837,   40.          ,   -0.0130839891],
        [   0.4493832906,   40.          ,   -0.0235511803]],

       [[   0.4493832906,   40.          ,   -0.0235511803],
        [   0.2496573837,   40.          ,   -0.0130839891],
        [   0.2496573837,   60.          ,   -0.0130839891],
        [   0.4493832906,   60.          ,   -0.0235511803]],

       [[   0.4493832906,   60.          ,   -0.0235511803],
        [   0.2496573837,   60.          ,   -0.0130839891],
        [   0.2496573837,   80.          ,   -0.0130839891],
        [   0.4493832906,   80.          ,   -0.0235511803]],

       [[   0.4493832906,   80.          ,   -0.0235511803],
        [   0.2496573837,   80.          ,   -0.0130839891],
        [   0.2496573837,  100.          ,   -0.0130839891],
        [   0.4493832906,  100.          ,   -0.0235511803]],

       [[   0.6491091976, -100.          ,   -0.0340183716],
        [   0.4493832906, -100.          ,   -0.0235511803],
        [   0.4493832906,  -80.          ,   -0.0235511803],
        [   0.6491091976,  -80.          ,   -0.0340183716]],

       [[   0.6491091976,  -80.          ,   -0.0340183716],
        [   0.4493832906,  -80.          ,   -0.0235511803],
        [   0.4493832906,  -60.          ,   -0.0235511803],
        [   0.6491091976,  -60.          ,   -0.0340183716]],

       [[   0.6491091976,  -60.          ,   -0.0340183716],
        [   0.4493832906,  -60.          ,   -0.0235511803],
        [   0.4493832906,  -40.          ,   -0.0235511803],
        [   0.6491091976,  -40.          ,   -0.0340183716]],

       [[   0.6491091976,  -40.          ,   -0.0340183716],
        [   0.4493832906,  -40.          ,   -0.0235511803],
        [   0.4493832906,  -20.          ,   -0.0235511803],
        [   0.6491091976,  -20.          ,   -0.0340183716]],

       [[   0.6491091976,  -20.          ,   -0.0340183716],
        [   0.4493832906,  -20.          ,   -0.0235511803],
        [   0.4493832906,    0.          ,   -0.0235511803],
        [   0.6491091976,    0.          ,   -0.0340183716]],

       [[   0.6491091976,    0.          ,   -0.0340183716],
        [   0.4493832906,    0.          ,   -0.0235511803],
        [   0.4493832906,   20.          ,   -0.0235511803],
        [   0.6491091976,   20.          ,   -0.0340183716]],

       [[   0.6491091976,   20.          ,   -0.0340183716],
        [   0.4493832906,   20.          ,   -0.0235511803],
        [   0.4493832906,   40.          ,   -0.0235511803],
        [   0.6491091976,   40.          ,   -0.0340183716]],

       [[   0.6491091976,   40.          ,   -0.0340183716],
        [   0.4493832906,   40.          ,   -0.0235511803],
        [   0.4493832906,   60.          ,   -0.0235511803],
        [   0.6491091976,   60.          ,   -0.0340183716]],

       [[   0.6491091976,   60.          ,   -0.0340183716],
        [   0.4493832906,   60.          ,   -0.0235511803],
        [   0.4493832906,   80.          ,   -0.0235511803],
        [   0.6491091976,   80.          ,   -0.0340183716]],

       [[   0.6491091976,   80.          ,   -0.0340183716],
        [   0.4493832906,   80.          ,   -0.0235511803],
        [   0.4493832906,  100.          ,   -0.0235511803],
        [   0.6491091976,  100.          ,   -0.0340183716]],

       [[   0.8488351045, -100.          ,   -0.0444855628],
        [   0.6491091976, -100.          ,   -0.0340183716],
        [   0.6491091976,  -80.          ,   -0.0340183716],
        [   0.8488351045,  -80.          ,   -0.0444855628]],

       [[   0.8488351045,  -80.          ,   -0.0444855628],
        [   0.6491091976,  -80.          ,   -0.0340183716],
        [   0.6491091976,  -60.          ,   -0.0340183716],
        [   0.8488351045,  -60.          ,   -0.0444855628]],

       [[   0.8488351045,  -60.          ,   -0.0444855628],
        [   0.6491091976,  -60.          ,   -0.0340183716],
        [   0.6491091976,  -40.          ,   -0.0340183716],
        [   0.8488351045,  -40.          ,   -0.0444855628]],

       [[   0.8488351045,  -40.          ,   -0.0444855628],
        [   0.6491091976,  -40.          ,   -0.0340183716],
        [   0.6491091976,  -20.          ,   -0.0340183716],
        [   0.8488351045,  -20.          ,   -0.0444855628]],

       [[   0.8488351045,  -20.          ,   -0.0444855628],
        [   0.6491091976,  -20.          ,   -0.0340183716],
        [   0.6491091976,    0.          ,   -0.0340183716],
        [   0.8488351045,    0.          ,   -0.0444855628]],

       [[   0.8488351045,    0.          ,   -0.0444855628],
        [   0.6491091976,    0.          ,   -0.0340183716],
        [   0.6491091976,   20.          ,   -0.0340183716],
        [   0.8488351045,   20.          ,   -0.0444855628]],

       [[   0.8488351045,   20.          ,   -0.0444855628],
        [   0.6491091976,   20.          ,   -0.0340183716],
        [   0.6491091976,   40.          ,   -0.0340183716],
        [   0.8488351045,   40.          ,   -0.0444855628]],

       [[   0.8488351045,   40.          ,   -0.0444855628],
        [   0.6491091976,   40.          ,   -0.0340183716],
        [   0.6491091976,   60.          ,   -0.0340183716],
        [   0.8488351045,   60.          ,   -0.0444855628]],

       [[   0.8488351045,   60.          ,   -0.0444855628],
        [   0.6491091976,   60.          ,   -0.0340183716],
        [   0.6491091976,   80.          ,   -0.0340183716],
        [   0.8488351045,   80.          ,   -0.0444855628]],

       [[   0.8488351045,   80.          ,   -0.0444855628],
        [   0.6491091976,   80.          ,   -0.0340183716],
        [   0.6491091976,  100.          ,   -0.0340183716],
        [   0.8488351045,  100.          ,   -0.0444855628]],

       [[   1.0485610115, -100.          ,   -0.0549527541],
        [   0.8488351045, -100.          ,   -0.0444855628],
        [   0.8488351045,  -80.          ,   -0.0444855628],
        [   1.0485610115,  -80.          ,   -0.0549527541]],

       [[   1.0485610115,  -80.          ,   -0.0549527541],
        [   0.8488351045,  -80.          ,   -0.0444855628],
        [   0.8488351045,  -60.          ,   -0.0444855628],
        [   1.0485610115,  -60.          ,   -0.0549527541]],

       [[   1.0485610115,  -60.          ,   -0.0549527541],
        [   0.8488351045,  -60.          ,   -0.0444855628],
        [   0.8488351045,  -40.          ,   -0.0444855628],
        [   1.0485610115,  -40.          ,   -0.0549527541]],

       [[   1.0485610115,  -40.          ,   -0.0549527541],
        [   0.8488351045,  -40.          ,   -0.0444855628],
        [   0.8488351045,  -20.          ,   -0.0444855628],
        [   1.0485610115,  -20.          ,   -0.0549527541]],

       [[   1.0485610115,  -20.          ,   -0.0549527541],
        [   0.8488351045,  -20.          ,   -0.0444855628],
        [   0.8488351045,    0.          ,   -0.0444855628],
        [   1.0485610115,    0.          ,   -0.0549527541]],

       [[   1.0485610115,    0.          ,   -0.0549527541],
        [   0.8488351045,    0.          ,   -0.0444855628],
        [   0.8488351045,   20.          ,   -0.0444855628],
        [   1.0485610115,   20.          ,   -0.0549527541]],

       [[   1.0485610115,   20.          ,   -0.0549527541],
        [   0.8488351045,   20.          ,   -0.0444855628],
        [   0.8488351045,   40.          ,   -0.0444855628],
        [   1.0485610115,   40.          ,   -0.0549527541]],

       [[   1.0485610115,   40.          ,   -0.0549527541],
        [   0.8488351045,   40.          ,   -0.0444855628],
        [   0.8488351045,   60.          ,   -0.0444855628],
        [   1.0485610115,   60.          ,   -0.0549527541]],

       [[   1.0485610115,   60.          ,   -0.0549527541],
        [   0.8488351045,   60.          ,   -0.0444855628],
        [   0.8488351045,   80.          ,   -0.0444855628],
        [   1.0485610115,   80.          ,   -0.0549527541]],

       [[   1.0485610115,   80.          ,   -0.0549527541],
        [   0.8488351045,   80.          ,   -0.0444855628],
        [   0.8488351045,  100.          ,   -0.0444855628],
        [   1.0485610115,  100.          ,   -0.0549527541]]])


nthreads = 4
size = int(1e6)

def func_np(a, b):
    """
    Control function using Numpy.
    """
    return np.exp(2.1 * a + 3.2 * b)

@jit('void(double[:], double[:], double[:])', nopython=True, nogil=True)
def inner_func_nb(result, a, b):
    """
    Function under test.
    """
    for i in range(len(result)):
        result[i] = math.exp(2.1 * a[i] + 3.2 * b[i])

def timefunc(correct, s, func, *args, **kwargs):
    """
    Benchmark *func* and print out its runtime.
    """
    print(s.ljust(20), end=" ")
    # Make sure the function is compiled before we start the benchmark
    res = func(*args, **kwargs)
    if correct is not None:
        assert np.allclose(res, correct), (res, correct)
    # time it
    print('{:>5.0f} ms'.format(min(repeat(lambda: func(*args, **kwargs),
                                          number=5, repeat=2)) * 1000))
    return res

def make_singlethread(inner_func):
    """
    Run the given function inside a single thread.
    """
    def func(*args):
        length = len(args[0])
        result = np.empty(length, dtype=np.float64)
        inner_func(result, *args)
        return result
    return func

def make_multithread(inner_func, numthreads):
    """
    Run the given function inside *numthreads* threads, splitting its
    arguments into equal-sized chunks.
    """
    def func_mt(*args):
        length = len(args[0])
        result = np.empty(length, dtype=np.float64)
        args = (result,) + args
        chunklen = (length + 1) // numthreads
        # Create argument tuples for each input chunk
        chunks = [[arg[i * chunklen:(i + 1) * chunklen] for arg in args]
                  for i in range(numthreads)]
        # Spawn one thread per chunk
        threads = [threading.Thread(target=inner_func, args=chunk)
                   for chunk in chunks]
        for thread in threads:
            thread.start()
        for thread in threads:
            thread.join()
        return result
    return func_mt


@jit(nopython=True)
def is_in_vortex_core(vector_list):
    #todo: polepszyc to
    for vec in vector_list:
        if norm(vec) < 1e-9:
            return True
    return False
        
#@numba.jit(nopython=True) -> slower than version below
@jit('float64[::1](float64[::1], float64[::1], float64[::1], optional(float64))', nopython=True, debug = True, nogil=True, cache=True) 
def vortex_line(p: np.array, p1: np.array, p2: np.array, gamma: float = 1.0) -> np.array:
#def vortex_line(p, p1,  p2,  gamma = 1.0):
    # strona 254

    r0 = np.asarray(p2 - p1)
    #print(numba.typeof(r0))
    r1 = np.asarray(p - p1)
    r2 = np.asarray(p - p2)
    
    r1_cross_r2 = np.cross(r1, r2)
    
    q_ind = np.array([0.0, 0.0, 0.0], dtype=np.float64)
    # in nonpython mode must be list reflection to convert list to non python type
    # nested python oject can be badly converted -> recommend to use numba.typed.List
    b = is_in_vortex_core(List([r1, r2, r1_cross_r2]))
    if b:
        return np.asarray([0.0, 0.0, 0.0], dtype=np.float64)
    else:
        q_ind = r1_cross_r2 / np.square(np.linalg.norm(r1_cross_r2))
        q_ind *= np.dot(r0, (r1 / np.linalg.norm(r1) - r2 / np.linalg.norm(r2)))
        q_ind *= gamma / (4 * np.pi)

    return q_ind

test = vortex_line(collocation_points[0], rings[0,0], rings[0,1], gamma= 1.0)

func_nb = make_singlethread(inner_func_nb)
func_nb_mt = make_multithread(inner_func_nb, nthreads)

a = np.random.rand(size)
b = np.random.rand(size)

correct = timefunc(None, "numpy (1 thread)", func_np, a, b)
timefunc(correct, "numba (1 thread)", func_nb, a, b)
timefunc(correct, "numba (%d threads)" % nthreads, func_nb_mt, a, b)